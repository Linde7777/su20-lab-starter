Exercise 1
	Scenario 1
		1. steps size in byte(8*4) is exactly equal to cache size in byte(8*4)
		2. increasing Rep Count will not change anything because the step size 
		in byte is bigger than block size. The requested address always plus 32
		which casue the index are always 00(point to the first block) and tag are 
		always different(which cause a miss)
		3. change step size to 1(so step size in byte is 4 which is half the block size,
		when address point to the next location, tag and index will not changed)

	Scenario 2
		1. 2 accesses, 1 lw, 1 sw
		2. addr1: lw miss sw miss | addr2: lw hit sw hit
		3. addr1 and addr2 are belong to the same block, addr1 is compulsory miss
		4. hit rate will close to 1, because the cache size is equal to array size
		the hit rate for the second repetition is 1
		5. let's say the cache can hold 64 array elements, and array size is 1000, 
		we will repeat iterate the hold array 5 times.
		At first we iterate arr[0]~arr[63] 5 times, then iterate arr[64]~arr[127] 5 times,
		we will repeat this pattern untill we iterate all elements.

	Scenario 3
		1. 0.5 0 0.25
		2. 32 16
		3. 16, when L1 miss, we came to the L2, there are 16 miss in L1
		so there is 16 accesses in L2
		4. increasing repCount, because array size in byte(128) is equal to L2 size in byte
		which mean all the array element can be stored in L2 after first interation
		be finished
		5. If we increase the number of block in L1 
		which casue L1 size in byte is bigger or equal to array size,
		and the repCount is greater than 1,
		the hit rate will increase, otherwise, the hit rate will not be changed.
		If we increase block size, no matter if it cause L1 size in byte 
		>= array size in byte or whether repCount is > 1, it will increase hit rate.

Exercise 2
	ijk:
	ikj:
	jik:
	jki:
	kij:
	kji:

	1.
	2.
	3.

Exercise 3
	Part 1
		blocksize = 20, n = 100: 
		blocksize = 20, n = 1000: 
		blocksize = 20, n = 2000: 
		blocksize = 20, n = 5000: 
		blocksize = 20, n = 10000: 

		1.
		2.

	Part 2
		blocksize = 50, n = 10000:
		blocksize = 100, n = 10000:
		blocksize = 500, n = 10000:
		blocksize = 1000, n = 10000:
		blocksize = 5000, n = 10000:

		1.
